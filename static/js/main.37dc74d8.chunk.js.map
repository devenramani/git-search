{"version":3,"sources":["App.js","serviceWorker.js","index.js","logo.svg"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","_handleSearch","searchQuery","that","assertThisInitialized","fetch","then","response","json","data","console","log","setState","searchResults","items","state","react_default","a","createElement","className","src","logo","alt","SearchBox","placeholder","onSearch","length","map","result","index","key","Card_default","CardContent_default","Typography_default","color","gutterBottom","variant","component","name","description","owner","login","language","score","Link","target","href","svn_url","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"4RAsFeA,cAtEb,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAORQ,cAAgB,SAACC,GAEf,IAAIC,EAAIR,OAAAS,EAAA,EAAAT,QAAAS,EAAA,EAAAT,CAAAD,IACRW,MAAM,gDAAkDH,GACrDI,KAAK,SAAUC,GAEd,OAAOA,EAASC,SAEfF,KAAK,SAAUG,GAEhBC,QAAQC,IAAIF,GAEZN,EAAKS,SAAS,CACZC,cAAeJ,EAAKK,MACpBZ,YAAaA,OApBnBR,EAAKqB,MAAQ,CACXb,YAAa,GACbW,cAAe,IAJAnB,wEA4BjB,OACEsB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,cAAlB,aACEH,EAAAC,EAAAC,cAAA,OAAKE,IAAKC,IAAMF,UAAU,WAAWG,IAAI,SAEzCN,EAAAC,EAAAC,cAACK,EAAA,EAAD,CACEC,YAAY,SACZC,SAAU5B,KAAKI,gBAKhBJ,KAAKkB,MAAMF,cAAca,OAAS,GAAK7B,KAAKkB,MAAMF,cAAcc,IAAI,SAACC,EAAQC,GAAT,OACnEb,EAAAC,EAAAC,cAAA,OAAKY,IAAKD,EAAOV,UAAU,cAGzBH,EAAAC,EAAAC,cAACa,EAAAd,EAAD,CAAME,UAAoB,EAARU,EAAa,WAAa,aAC1Cb,EAAAC,EAAAC,cAACc,EAAAf,EAAD,KACED,EAAAC,EAAAC,cAACe,EAAAhB,EAAD,CAAYE,UAAU,UAAUe,MAAM,gBAAgBC,cAAY,GAAEN,EAAQ,GAC5Eb,EAAAC,EAAAC,cAACe,EAAAhB,EAAD,CAAYmB,QAAQ,KAAKC,UAAU,MAAMT,EAAOU,MAChDtB,EAAAC,EAAAC,cAACe,EAAAhB,EAAD,CAAYoB,UAAU,KAAKT,EAAOW,aAClCvB,EAAAC,EAAAC,cAACe,EAAAhB,EAAD,CAAYE,UAAU,MAAMe,MAAM,iBAAlC,WAA0DlB,EAAAC,EAAAC,cAAA,SAAIU,EAAOY,MAAMC,QAC3EzB,EAAAC,EAAAC,cAACe,EAAAhB,EAAD,CAAYE,UAAU,MAAMe,MAAM,iBAAlC,cAA6DlB,EAAAC,EAAAC,cAAA,SAAIU,EAAOc,WACxE1B,EAAAC,EAAAC,cAACe,EAAAhB,EAAD,CAAYE,UAAU,MAAMe,MAAM,iBAAlC,WAA0DlB,EAAAC,EAAAC,cAAA,SAAIU,EAAOe,QAErE3B,EAAAC,EAAAC,cAAC0B,EAAA,EAAD,CAAMC,OAAO,SAASC,KAAMlB,EAAOmB,SAAnC,sBAvDAC,aCFEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOvC,EAAAC,EAAAC,cAACsC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMvD,KAAK,SAAAwD,GACjCA,EAAaC,mCEnInBC,EAAAC,QAAiBC,EAAAC,EAAuB","file":"static/js/main.37dc74d8.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nimport { SearchBox } from 'office-ui-fabric-react/lib/SearchBox';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\nimport { Link } from 'office-ui-fabric-react/lib/Link';\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props)\n    this.state = {\n      searchQuery: '',\n      searchResults: []\n    }\n  }\n\n  _handleSearch = (searchQuery) => {\n\n    let that = this;\n    fetch('https://api.github.com/search/repositories?q=' + searchQuery)\n      .then(function (response) {\n\n        return response.json();\n\n      }).then(function (data) {\n\n        console.log(data);\n\n        that.setState({\n          searchResults: data.items,\n          searchQuery: searchQuery\n        });\n      });\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">Git-Search\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n\n          <SearchBox\n            placeholder=\"Search\"\n            onSearch={this._handleSearch}\n          // onFocus={() => console.log('onFocus called')}\n          // onBlur={() => console.log('onBlur called')}\n          // onChange={() => console.log('onChange called')}\n          />\n          {this.state.searchResults.length > 0 && this.state.searchResults.map((result, index) =>\n            <div key={index} className=\"ParentCard\">\n\n\n              <Card className={(index & 1) ? \"card_odd\" : \"card_even\"}>\n                <CardContent>\n                  <Typography className=\"classes\" color=\"textSecondary\" gutterBottom>{index + 1}</Typography>\n                  <Typography variant=\"h5\" component=\"h2\">{result.name}</Typography>\n                  <Typography component=\"p\">{result.description}</Typography>\n                  <Typography className=\"pos\" color=\"textSecondary\">Owner : <b>{result.owner.login}</b></Typography>\n                  <Typography className=\"pos\" color=\"textSecondary\">Language : <b>{result.language}</b></Typography>\n                  <Typography className=\"pos\" color=\"textSecondary\">Score : <b>{result.score}</b></Typography>\n\n                  <Link target='_blank' href={result.svn_url}>link</Link>\n\n                </CardContent>\n\n              </Card>\n\n            </div>\n          )}\n\n        </header>\n      </div>\n    );\n  }\n}\n\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}